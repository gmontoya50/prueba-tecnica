service: todo-tech-challenge

package:
  individually: true

useDotenv: true

plugins:
  - serverless-webpack
  - serverless-dotenv-plugin
  - serverless-s3-local
  - serverless-offline
  - serverless-prune-plugin

provider:
  name: aws
  runtime: nodejs20.x
  deploymentMethod: direct
  stage: ${env:AWS_STAGE, 'dev'}
  region: ${env:AWS_REGION, 'us-east-1'}
  memorySize: 512
  timeout: 30
  environment:
    TODO_TABLE: ${self:service}-${self:provider.stage}-todos
    TODO_BUCKET: ${self:service}-${self:provider.stage}-attachments
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: '1'
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:BatchWriteItem
            - ec2:CreateNetworkInterface
            - ec2:DescribeNetworkInterfaces
            - ec2:DetachNetworkInterface
            - ec2:DeleteNetworkInterface
            - s3:ListBucket
            - s3:GetObject
            - s3:PutObject
            - s3:DeleteObject
            - textract:DetectDocumentText
            - textract:AnalyzeDocument
            - secretsmanager:GetSecretValue
            - ssm:GetParameter
          Resource: '*'
        - Effect: Allow
          Action:
            - sqs:SendMessage
            - sqs:GetQueueUrl
            - sqs:ListQueues
          Resource: arn:aws:sqs:${self:provider.region}:*:*

functions:
  createTodo:
    handler: src/handlers/createTodo.handler
    events:
      - httpApi:
          method: post
          path: /todos

resources:
  Resources:
    TodosTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.TODO_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.TODO_BUCKET}
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              AllowedHeaders:
                - '*'
custom:
  prune:
    automatic: true
    number: 3
  webpack:
    webpackConfig: ./webpack.config.js
    packager: npm
  serverless-offline:
    httpPort: 4000
    lambdaPort: 4002
  s3:
    host: localhost
    port: 4570
    directory: ./.s3
  dotenv:
    required: false

